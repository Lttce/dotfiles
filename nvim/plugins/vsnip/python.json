{
    "main": {
        "prefix": "main",
        "body": [
            "def main():",
            "\tpass$1",
            "",
            "",
            "if __name__ == '__main__':",
            "\tmain()"
        ]
    },
    "input_split": {
        "prefix": "inputsplit",
        "body": "input().split()"
    },
    "input_map": {
        "prefix": "mapintinput",
        "body": "map(int, input().split())"
    },
    "int_input": {
        "prefix": "intinput",
        "body": "int(input())"
    },
    "list_map_input": {
        "prefix": "listmapinput",
        "body": "list(map(int, input().split()))"
    },
    "def": {
        "prefix": "def",
        "body": [
            "def $1():",
            "\tpass"
        ]
    },
    "is_prime": {
        "prefix": "isprime",
        "body": [
            "def is_prime(n: int) -> bool:",
            "\tfrom math import floor, sqrt",
            "\tfor i in range(2, floor(sqrt(n))+1):",
            "\t\tif n % i == 0:",
            "\t\t\treturn False",
            "\treturn True"
        ]
    },
    "eratosthenes_sieve": {
        "prefix": "eratosthenessieve",
        "body": [
            "def eratosthenes_sieve(n: int) -> list:",
            "\tprimes_list = []",
            "\tis_prime = [True] * (n + 1)",
            "\tis_prime[0] = False",
            "\tis_prime[1] = False",
            "",
            "\tfor i in range(n+1):",
            "\t\tif not is_prime[i]:",
            "\t\t\tcontinue",
            "\t\tprimes_list.append(i)",
            "\t\tfor j in range(i*i, n+1, i):",
            "\t\t\tis_prime[j] = False",
            "",
            "\treturn primes_list"
        ]
    }
}
