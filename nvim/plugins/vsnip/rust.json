{
    "input": {
        "prefix": "input",
        "body": [
            "input! {",
            "\t$1: $2,",
            "}"
        ]
    },
    "impl": {
        "prefix": "impl",
        "body": [
            "impl $1 {",
            "\t$2",
            "}"
        ]
    },
    "macroinput": {
        "prefix": "macroinput",
        "body": [
            "#[macro_export]",
            "macro_rules! input {",
            "\t(source = \\$s:expr, \\$(\\$r:tt)*) => {",
            "\t\tlet mut iter = \\$s.split_whitespace();",
            "\t\tlet mut next = || { iter.next().unwrap() };",
            "\t\tinput_inner!{next, \\$(\\$r)*}",
            "\t};",
            "\t(\\$(\\$r:tt)*) => {",
            "\t\tlet stdin = std::io::stdin();",
            "\t\tlet mut bytes = std::io::Read::bytes(std::io::BufReader::new(stdin.lock()));",
            "\t\tlet mut next = move || -> String{",
            "\t\t\tbytes",
            "\t\t\t\t.by_ref()",
            "\t\t\t\t.map(|r|r.unwrap() as char)",
            "\t\t\t\t.skip_while(|c|c.is_whitespace())",
            "\t\t\t\t.take_while(|c|!c.is_whitespace())",
            "\t\t\t\t.collect()",
            "\t\t};",
            "\t\tinput_inner!{next, \\$(\\$r)*}",
            "\t};",
            "}",
            "",
            "#[macro_export]",
            "macro_rules! input_inner {",
            "\t(\\$next:expr) => {};",
            "\t(\\$next:expr, ) => {};",
            "",
            "\t(\\$next:expr, \\$var:ident : \\$t:tt \\$(\\$r:tt)*) => {",
            "\t\tlet \\$var = read_value!(\\$next, \\$t);",
            "\t\tinput_inner!{\\$next \\$(\\$r)*}",
            "\t};",
            "}",
            "",
            "#[macro_export]",
            "macro_rules! read_value {",
            "\t(\\$next:expr, ( \\$(\\$t:tt),* )) => { ( \\$(read_value!(\\$next, \\$t)),* ) };",
            "",
            "\t(\\$next:expr, [ \\$t:tt ; \\$len:expr ]) => { (0..\\$len).map(|_| read_value!(\\$next, \\$t)).collect::<Vec<_>>() };",
            "",
            "\t(\\$next:expr, chars) => { read_value!(\\$next, String).chars().collect::<Vec<char>>() };",
            "",
            "\t(\\$next:expr, usize1) => { read_value!(\\$next, usize) - 1 };",
            "",
            "\t(\\$next:expr, \\$t:ty) => { \\$next().parse::<\\$t>().expect(\"Parse error\") };",
            "}"
        ]
    }
}
